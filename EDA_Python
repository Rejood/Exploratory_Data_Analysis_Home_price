import inline as inline
import matplotlib
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.stats import norm
from sklearn.preprocessing import StandardScaler
from scipy import stats
import warnings

warnings.filterwarnings('ignore')

# Importing train set
df_train = pd.read_csv(r'C:\Users\Reyhaneh\Desktop\Home_Price\train.csv')
print(df_train.columns)
print(df_train['SalePrice'].describe())
sns.distplot(df_train['SalePrice'])  # density plot
plt.show()
print("swekness:%.2f" % df_train['SalePrice'].skew())  # skewness
print("kurtosis:%.2f" % df_train['SalePrice'].kurtosis())  # Kurtosis

# Relationship with numerical variables
# scatter plot grlivarea/saleprice
var1 = 'GrLivArea'
data1 = pd.concat([df_train['SalePrice'], df_train[var1]], axis=1)
data1.plot.scatter(x=var1, y='SalePrice', ylim=(0, 800000))

# scatter plot totalbsmtsf/saleprice
var2 = 'TotalBsmtSF'
data2 = pd.concat([df_train['SalePrice'], df_train[var2]], axis=1)
data2.plot.scatter(x=var2, y='SalePrice', ylim=(0.800000))

# box plot overallqual/saleprice
var3 = 'OverallQual'
data3 = pd.concat([df_train['SalePrice'], df_train[var3]], axis=1)
fig, ax = plt.subplots()
fig = sns.boxplot(x=var3, y="SalePrice", data=data3)
fig.axis(ymin=0, ymax=800000)

# box plot YearBuilt/saleprice
var3 = 'YearBuilt'
data3 = pd.concat([df_train['SalePrice'], df_train[var3]], axis=1)
fig, ax = plt.subplots(figsize=(16, 8))
fig = sns.boxplot(x=var3, y="SalePrice", data=data3)
fig.axis(ymin=0, ymax=800000)
plt.xticks(rotation=90)

# correlation matrix
corrmat = df_train.corr()
fig, ax = plt.subplots(figsize=(12, 9))
fig = sns.heatmap(corrmat, vmax=.8, square=True, annot=False)

# saleprice correlation matrix
k = 10  # number of variables for heatmap
cols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index
cm=corrmat.loc[cols][cols]
sns.set(font_scale=1.25)
hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values,
                 xticklabels=cols.values)
#scatterplot
sns.set()
cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']
sns.pairplot(df_train[cols], size = 2.5)
plt.show()

#missing data
total = df_train.isnull().sum().sort_values(ascending=False)
percent = (df_train.isnull().sum()/df_train.isnull().count()).sort_values(ascending=False)
missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])
missing_data.head(20)

#dealing with missing data
df_train = df_train.drop((missing_data[missing_data['Total'] > 1]).index,1)
df_train = df_train.drop(df_train.loc[df_train['Electrical'].isnull()].index)
df_train.isnull().sum().max() 

#standardizing data
saleprice_scaled = StandardScaler().fit_transform(df_train['SalePrice'][:,np.newaxis]);
low_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]
high_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]
print('outer range (low) of the distribution:')
print(low_range)
print('\nouter range (high) of the distribution:')
print(high_range)

#bivariate analysis saleprice/grlivarea
var = 'GrLivArea'
data = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)
data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));

#deleting points
df_train.sort_values(by = 'GrLivArea', ascending = False)[:2]
df_train = df_train.drop(df_train[df_train['Id'] == 1299].index)
df_train = df_train.drop(df_train[df_train['Id'] == 524].index)

#bivariate analysis saleprice/grlivarea
var = 'TotalBsmtSF'
data = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)
data.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));

#histogram and normal probability plot
sns.distplot(df_train['SalePrice'], fit=norm);
fig = plt.figure()
res = stats.probplot(df_train['SalePrice'], plot=plt)

#applying log transformation
df_train['SalePrice'] = np.log(df_train['SalePrice'])


#transformed histogram and normal probability plot
sns.distplot(df_train['SalePrice'], fit=norm);
fig = plt.figure()
res = stats.probplot(df_train['SalePrice'], plot=plt)
