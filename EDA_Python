import inline as inline
import matplotlib
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.stats import norm
from sklearn.preprocessing import StandardScaler
from scipy import stats
import warnings

warnings.filterwarnings('ignore')

# Importing train set
df_train = pd.read_csv(r'C:\Users\Reyhaneh\Desktop\Home_Price\train.csv')
print(df_train.columns)
print(df_train['SalePrice'].describe())
sns.distplot(df_train['SalePrice'])  # density plot
plt.show()
print("swekness:%.2f" % df_train['SalePrice'].skew())  # skewness
print("kurtosis:%.2f" % df_train['SalePrice'].kurtosis())  # Kurtosis

# Relationship with numerical variables
# scatter plot grlivarea/saleprice
var1 = 'GrLivArea'
data1 = pd.concat([df_train['SalePrice'], df_train[var1]], axis=1)
data1.plot.scatter(x=var1, y='SalePrice', ylim=(0, 800000))

# scatter plot totalbsmtsf/saleprice
var2 = 'TotalBsmtSF'
data2 = pd.concat([df_train['SalePrice'], df_train[var2]], axis=1)
data2.plot.scatter(x=var2, y='SalePrice', ylim=(0.800000))

# box plot overallqual/saleprice
var3 = 'OverallQual'
data3 = pd.concat([df_train['SalePrice'], df_train[var3]], axis=1)
fig, ax = plt.subplots()
fig = sns.boxplot(x=var3, y="SalePrice", data=data3)
fig.axis(ymin=0, ymax=800000)

# box plot YearBuilt/saleprice
var3 = 'YearBuilt'
data3 = pd.concat([df_train['SalePrice'], df_train[var3]], axis=1)
fig, ax = plt.subplots(figsize=(16, 8))
fig = sns.boxplot(x=var3, y="SalePrice", data=data3)
fig.axis(ymin=0, ymax=800000)
plt.xticks(rotation=90)

# correlation matrix
corrmat = df_train.corr()
fig, ax = plt.subplots(figsize=(12, 9))
fig = sns.heatmap(corrmat, vmax=.8, square=True, annot=False)
print(corrmat)
# saleprice correlation matrix
k = 10  # number of variables for heatmap
cols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index
cm=corrmat.loc[cols][cols]
sns.set(font_scale=1.25)
hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values,
                 xticklabels=cols.values)
plt.show()
